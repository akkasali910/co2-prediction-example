#!/usr/bin/env python3
"""
This script sets up a SageMaker Model Monitor schedule to detect bias drift
in the predictions of a live endpoint.

It uses the bias baseline generated by the pipeline's Clarify step.

Prerequisites:
- The main pipeline must have been run successfully.
- The endpoint must be deployed and 'InService'.
- Data capture must be enabled on the endpoint.
"""
import sagemaker
from sagemaker.model_monitor import ModelBiasMonitor, CronExpressionGenerator
from sagemaker.clarify import BiasConfig, ModelPredictedLabelConfig

def main():
    """
    Configures and creates a model bias monitoring schedule.
    """
    # --- Configuration ---
    try:
        role = sagemaker.get_execution_role()
        sagemaker_session = sagemaker.Session()
        default_bucket = sagemaker_session.default_bucket()
        print("✅ Running in a SageMaker environment. Role and session detected.")
    except ValueError:
        print("❌ Could not get execution role. Please run from a SageMaker environment.")
        return

    endpoint_name = "co2-prediction-endpoint"
    
    # --- Paths and Configs from the pipeline ---
    # This is the S3 URI where the ClarifyCheckStep saved its output
    clarify_output_uri = f"s3://{default_bucket}/clarify-output"
    
    # Path where the bias monitoring job will output its reports
    monitor_output_path = f"s3://{default_bucket}/monitoring/bias-reports"

    print(f"Using bias baseline from: {clarify_output_uri}")
    print(f"Bias monitor reports will be saved to: {monitor_output_path}")

    # --- Recreate the Bias and Model Configs used in the pipeline ---
    # This tells the monitor which feature to check for bias ('occupancy')
    # and what a "positive" outcome is for calculating metrics.
    bias_config = BiasConfig(
        label_values_or_threshold=[1],
        facet_name="feature_1", # Must match the facet from the pipeline
    )
    
    # This tells the monitor that the model's prediction is the first (and only)
    # value in the output.
    model_predicted_label_config = ModelPredictedLabelConfig(probability_threshold=0.5)

    # --- Create a Model Bias Monitor object ---
    bias_monitor = ModelBiasMonitor(
        role=role,
        sagemaker_session=sagemaker_session,
        instance_count=1,
        instance_type="ml.m5.xlarge",
    )

    # --- Create the Monitoring Schedule ---
    # This tells SageMaker to run a bias monitoring job every hour.
    bias_monitor.create_monitoring_schedule(
        monitor_schedule_name="co2-bias-monitor-schedule",
        endpoint_input=endpoint_name,
        output_s3_uri=monitor_output_path,
        # Point to the analysis_config.json generated by the Clarify step
        analysis_config=f"{clarify_output_uri}/analysis_config.json",
        # Point to the constraints file generated by the Clarify step
        constraints=f"{clarify_output_uri}/analysis.json",
        schedule_cron_expression=CronExpressionGenerator.hourly(),
    )
    print(f"\n✅ Successfully created bias monitoring schedule for endpoint '{endpoint_name}'.")

if __name__ == "__main__":
    main()
