#!/usr/bin/env python3
"""
This script sets up a SageMaker Model Monitor schedule for the deployed
CO2 prediction endpoint. It uses the baseline generated by the pipeline
to detect data drift in live traffic.

Prerequisites:
- The main pipeline must have been run successfully.
- The endpoint must be deployed and 'InService'.
"""
import sagemaker
from sagemaker.model_monitor import DefaultModelMonitor, CronExpressionGenerator

def main():
    """
    Configures and creates a monitoring schedule.
    """
    # --- Configuration ---
    try:
        role = sagemaker.get_execution_role()
        sagemaker_session = sagemaker.Session()
        default_bucket = sagemaker_session.default_bucket()
        region = sagemaker_session.boto_region_name
        print("✅ Running in a SageMaker environment. Role and session detected.")
    except ValueError:
        print("❌ Could not get execution role. Please run from a SageMaker environment.")
        return

    endpoint_name = "pando2-co2-prediction-endpoint"
    
    # --- Paths from the pipeline ---
    # Path to the baseline statistics and constraints generated by the QualityCheckStep
    baseline_results_uri = f"s3://{default_bucket}/pando2/monitoring/data-quality"
    
    # Path where the monitoring job will output its reports
    monitor_output_path = f"s3://{default_bucket}/pando2/monitoring/reports"

    print(f"Using baseline from: {baseline_results_uri}")
    print(f"Monitor reports will be saved to: {monitor_output_path}")

    # --- Create a Model Monitor object ---
    monitor = DefaultModelMonitor(
        role=role,
        instance_count=1,
        instance_type="ml.m5.xlarge",
        volume_size_in_gb=20,
        max_runtime_in_seconds=3600,
    )

    # --- Create the Monitoring Schedule ---
    # This tells SageMaker to run a monitoring job every hour.
    monitor.create_monitoring_schedule(
        monitor_schedule_name="pando2-co2-monitor-schedule",
        endpoint_input=endpoint_name,
        output_s3_uri=monitor_output_path,
        statistics=f"{baseline_results_uri}/statistics.json",
        constraints=f"{baseline_results_uri}/constraints.json",
        schedule_cron_expression=CronExpressionGenerator.hourly(),
    )
    print(f"\n✅ Successfully created monitoring schedule for endpoint '{endpoint_name}'.")
    print("You can view the schedule and its executions in the SageMaker Studio UI under 'Monitoring'.")

if __name__ == "__main__":
    main()